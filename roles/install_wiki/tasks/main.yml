- name: install some packets
  shell: "{{ item }}"
  with_items: 
    - yum install -y gcc-c++ make 
    - curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash - 
    - yum install -y nodejs
    - mkdir /wiki
    - yum install glusterfs-fuse -y
- name: edit /etc/hosts
  copy:
    content: |
      127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
      ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
      127.0.1.1 {{ backend_name }} {{ backend_name }}
      192.168.56.202 consul1 {{ hostvars.consul1.hostname }}
      192.168.56.203 consul2 {{ hostvars.consul2.hostname }}
      192.168.56.204 consul3 {{ hostvars.consul3.hostname }}
      192.168.56.209 backend1 {{ hostvars.backend1.hostname }}
      192.168.56.210 backend2 {{ hostvars.backend2.hostname }}
      192.168.56.205 postgres1 {{ hostvars.host1.hostname }}
      192.168.56.206 postgres2 {{ hostvars.host2.hostname }}
      192.168.56.207 postgres3 {{ hostvars.host3.hostname }}
      192.168.56.208 haproxy_postgres {{ hostvars.haproxy_postgres.hostname }}
      192.168.56.198 gluster gluster.otus.test
      192.168.56.199 gluster1 {{ hostvars.gluster1.hostname }}
      192.168.56.200 gluster2 {{ hostvars.gluster2.hostname }}
      192.168.56.201 gluster3 {{ hostvars.gluster3.hostname }}
    dest: /etc/hosts
- name: download & install wiki
  unarchive:
    src: https://github.com/Requarks/wiki/releases/latest/download/wiki-js.tar.gz
    dest: /wiki
    remote_src: yes
- name: config wiki
  copy:
    content: |
      #######################################################################
      # Wiki.js - CONFIGURATION                                             #
      #######################################################################
      # Full documentation + examples:
      # https://docs.requarks.io/install

      # ---------------------------------------------------------------------
      # Port the server should listen to
      # ---------------------------------------------------------------------

      port: 3000

      # ---------------------------------------------------------------------
      # Database
      # ---------------------------------------------------------------------
      # Supported Database Engines:
      # - postgres = PostgreSQL 9.5 or later
      # - mysql = MySQL 8.0 or later (5.7.8 partially supported, refer to docs)
      # - mariadb = MariaDB 10.2.7 or later
      # - mssql = MS SQL Server 2012 or later
      # - sqlite = SQLite 3.9 or later

      db:
        type: postgres

        # PostgreSQL / MySQL / MariaDB / MS SQL Server only:
        host: 192.168.56.208
        port: 5000
        user: postgres
        pass: zalando
        db: {{ wiki_db }}
        ssl: false

        # Optional - PostgreSQL / MySQL / MariaDB only:
        # -> Uncomment lines you need below and set `auto` to false
        # -> Full list of accepted options: https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
        sslOptions:
          auto: true
          # rejectUnauthorized: false
          # ca: path/to/ca.crt
          # cert: path/to/cert.crt
          # key: path/to/key.pem
          # pfx: path/to/cert.pfx
          # passphrase: xyz123

        # Optional - PostgreSQL only:
        schema: public

        # SQLite only:
        storage: path/to/database.sqlite

      #######################################################################
      # ADVANCED OPTIONS                                                    #
      #######################################################################
      # Do not change unless you know what you are doing!

      # ---------------------------------------------------------------------
      # SSL/TLS Settings
      # ---------------------------------------------------------------------
      # Consider using a reverse proxy (e.g. nginx) if you require more
      # advanced options than those provided below.

      ssl:
        enabled: false
        port: 3443

        # Provider to use, possible values: custom, letsencrypt
        provider: custom

        # ++++++ For custom only ++++++
        # Certificate format, either 'pem' or 'pfx':
        format: pem
        # Using PEM format:
        key: path/to/key.pem
        cert: path/to/cert.pem
        # Using PFX format:
        pfx: path/to/cert.pfx
        # Passphrase when using encrypted PEM / PFX keys (default: null):
        passphrase: null
        # Diffie Hellman parameters, with key length being greater or equal
        # to 1024 bits (default: null):
        dhparam: null

        # ++++++ For letsencrypt only ++++++
        domain: wiki.yourdomain.com
        subscriberEmail: admin@example.com

      # ---------------------------------------------------------------------
      # Database Pool Options
      # ---------------------------------------------------------------------
      # Refer to https://github.com/vincit/tarn.js for all possible options

      pool:
        # min: 2
        # max: 10

      # ---------------------------------------------------------------------
      # IP address the server should listen to
      # ---------------------------------------------------------------------
      # Leave 0.0.0.0 for all interfaces

      bindIP: 0.0.0.0

      # ---------------------------------------------------------------------
      # Log Level
      # ---------------------------------------------------------------------
      # Possible values: error, warn, info (default), verbose, debug, silly

      logLevel: info

      # ---------------------------------------------------------------------
      # Log Format
      # ---------------------------------------------------------------------
      # Output format for logging, possible values: default, json

      logFormat: default

      # ---------------------------------------------------------------------
      # Offline Mode
      # ---------------------------------------------------------------------
      # If your server cannot access the internet. Set to true and manually
      # download the offline files for sideloading.

      offline: false

      # ---------------------------------------------------------------------
      # High-Availability
      # ---------------------------------------------------------------------
      # Set to true if you have multiple concurrent instances running off the
      # same DB (e.g. Kubernetes pods / load balanced instances). Leave false
      # otherwise. You MUST be using PostgreSQL to use this feature.

      ha: true

      # ---------------------------------------------------------------------
      # Data Path
      # ---------------------------------------------------------------------
      # Writeable data path used for cache and temporary user uploads.
      dataPath: ./data

      # ---------------------------------------------------------------------
      # Body Parser Limit
      # ---------------------------------------------------------------------
      # Maximum size of API requests body that can be parsed. Does not affect
      # file uploads.

      bodyParserLimit: 5mb
    dest: /wiki/config.yml
- name: create systemd unit
  copy:
    content: |
      [Unit]
      Description=Wiki.js
      After=network.target

      [Service]
      Type=simple
      ExecStart=/usr/bin/node server
      Restart=always
      # Consider creating a dedicated user for Wiki.js here:
      User=nobody
      Environment=NODE_ENV=production
      WorkingDirectory=/wiki

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/wiki.service
- name: systemd daemon reload
  systemd:
    daemon_reload: true
- name: create share
  command: '{{ item }}'
  with_items: 
    - mkdir -p /wiki/data/share/
    - sudo mount -t glusterfs gluster:share /wiki/data/share/
- name: start wiki
  systemd:
    name: wiki
    state: started
    enabled: true
- name: set permisions
  command: chown -R nobody:nobody /wiki
- name: stop firewall
  systemd:
    name: firewalld
    state: stopped
- name: add firewall consul tcp rules
  copy:
    content: |
      <?xml version="1.0" encoding="utf-8"?>
      <service>      
      <short>consul</short>
      <description>Firewall rule for consul port</description>
      <port protocol="tcp" port="8300"/>
      <port protocol="tcp" port="8301"/>
      <port protocol="tcp" port="8302"/>
      <port protocol="tcp" port="8500"/>
      <port protocol="tcp" port="8600"/>
      <port protocol="tcp" port="3000"/>
      </service>
    dest: /etc/firewalld/services/consultcp.xml
- name: add firewall consul tcp rules
  copy:
    content: |
      <?xml version="1.0" encoding="utf-8"?>
      <service>      
      <short>consul</short>
      <description>Firewall rule for consul port</description>
      <port protocol="udp" port="8301"/>
      <port protocol="udp" port="8302"/>
      <port protocol="udp" port="8600"/>
      </service>
    dest: /etc/firewalld/services/consuludp.xml
- name: restart firewalld
  systemd:
    name: firewalld
    state: restarted
- name: Configuring firewall services
  firewalld:
    service: consuludp
    permanent: yes
    state: enabled
    immediate: yes
- name: Configuring firewall services
  firewalld:
    service: consultcp
    permanent: yes
    state: enabled
    immediate: yes
- name: set hostname
  command: hostnamectl set-hostname {{ hostname }}
- name: sync time
  command: "{{ item }}"
  with_items: 
    - timedatectl set-timezone Europe/Moscow
    - yum install chrony unzip wget -y
    - systemctl enable chronyd --now
- name: download consul
  shell: wget -P /home/ https://hashicorp-releases.yandexcloud.net/consul/1.17.2/consul_1.17.2_linux_amd64.zip --no-check-certificate
  ignore_errors: true
- name: unzip consul
  unarchive:
    src: /home/consul_1.17.2_linux_amd64.zip
    dest: /usr/bin/
    remote_src: yes
- name: create user and dir
  command: "{{ item }}"
  with_items: 
    - useradd -r -c 'Consul DCS service' consul
    - mkdir -p /var/lib/consul /etc/consul.d
    - chown consul:consul /var/lib/consul /etc/consul.d
    - chmod 775 /var/lib/consul /etc/consul.d
  ignore_errors: true
- name: config consul
  copy: 
    content: |
      {
          "bind_addr": "{{ backend_ip }}",
          "datacenter": "dc1",
          "data_dir": "/var/lib/consul",
          "domain": "consul",
          "enable_script_checks": true,
          "dns_config": {
              "enable_truncate": true,
              "only_passing": true
          },
          "enable_syslog": true,
          "encrypt": "{{ consul_key }}",
          "leave_on_terminate": true,
          "log_level": "DEBUG",
          "rejoin_after_leave": true,
          "retry_join": [
              "consul1.otus.test",
              "consul2.otus.test",
              "consul3.otus.test"
          ],
          "server": false,
          "ui_config": {
              "enabled": true
          },
          "ports": {
              "grpc_tls":8502,
              "http":8500
              },
          "tls": {
              "defaults": {
                  "ca_file": "/etc/consul.d/certs/consul-agent-ca.pem",
                  "cert_file": "/etc/consul.d/certs/dc1-server-consul-0.pem",
                  "key_file": "/etc/consul.d/certs/dc1-server-consul-0-key.pem",
                  "verify_incoming": true,
                  "verify_outgoing": true,
                  "verify_server_hostname": true
              },
          }
      }     
    dest: /etc/consul.d/config.json
- name: config svc
  copy:
    content: |
      {
          "service": {
              "id": "wiki",
              "name": "wiki",
              "tags": [ "wiki" ],
              "port": 3000,
              "enable_tag_override": false,
              "check": {
                  "id": "wiki_up",
                  "name": "wiki healthcheck",
                  "tcp": "{{ backend_ip }}:3000",
                  "interval": "10s",
                  "timeout": "2s"
              }
          }
      }
    dest: /etc/consul.d/wiki.json
- name: create cert dir
  file:
    path: /etc/consul.d/certs
    state: directory
    owner: consul
    group: consul
- name: copy keys
  copy:
    src: ./certs/consul1/home/vagrant/
    dest: /etc/consul.d/certs/
    owner: consul
    group: consul
- name: create systemd unit
  copy:
    content: |
      [Unit]
      Description=Consul Service Discovery Agent
      Documentation=https://www.consul.io/
      After=network-online.target
      Wants=network-online.target
      
      [Service]
      Type=simple
      User=consul
      Group=consul
      ExecStart=/usr/bin/consul agent \
          -node={{ hostname }} \
          -config-dir=/etc/consul.d
      ExecReload=/bin/kill -HUP $MAINPID
      KillSignal=SIGINT
      TimeoutStopSec=5
      Restart=on-failure
      SyslogIdentifier=consul
      
      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/consul.service
- name: start consul
  systemd:
    name: consul
    state: started

